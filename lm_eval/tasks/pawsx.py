"""
The dataset consists of  23,659 human translated PAWS evaluation pairs and 296,406 machine translated training pairs in 6 ltypologicallly distsinct anguages. Examples are adapted from  PAWS-Wiki

Git: https://github.com/google-research-datasets/paws/tree/master/pawsx"
"""
import datasets
from lm_eval.base import Task, rf
from lm_eval.metrics import mean
from functools import partial
import numpy as np

_CITATION = """
@inproceedings{yang-etal-2019-paws,
    title = "{PAWS}-{X}: A Cross-lingual Adversarial Dataset for Paraphrase Identification",
    author = "Yang, Yinfei  and
      Zhang, Yuan  and
      Tar, Chris  and
      Baldridge, Jason",
    booktitle = "Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing and the 9th International Joint Conference on Natural Language Processing (EMNLP-IJCNLP)",
    month = nov,
    year = "2019",
    address = "Hong Kong, China",
    publisher = "Association for Computational Linguistics",
    url = "https://aclanthology.org/D19-1382",
    doi = "10.18653/v1/D19-1382",
    pages = "3687--3692",
}"""

def _pawsx_agg_precision(key, items):
    references, predictions = zip(*items)
    precision_metric = datasets.load_metric("precision")
    return precision_metric.compute(references=references,
                                    predictions=predictions, average='macro',
                                    labels= np.unique(predictions))[key]

def _pawsx_agg_recall(key, items):
    references, predictions = zip(*items)
    recall_metric = datasets.load_metric("recall")
    return recall_metric.compute(references=references,
                                 predictions=predictions, average='macro',
                                 labels= np.unique(predictions))[key]

def _paws_agg_f1(key, items):
    references, predictions = zip(*items)
    f1_metric = datasets.load_metric("f1")
    return f1_metric.compute(references=references,
                             predictions=predictions, average='macro',
                             labels= np.unique(predictions))[key]

class PAWSX(Task):
    VERSION = 0
    DATASET_PATH = "paws-x"
    DATASET_NAME = None

    def has_training_docs(self):
        return True

    def has_validation_docs(self):
        return True

    def has_test_docs(self):
        return True
      
    def training_docs(self):
        if self.has_training_docs():
             return self.dataset["train"]

    def validation_docs(self):
        if self.has_validation_docs():
             return self.dataset["validation"]
            
    def test_docs(self):
        if self.has_test_docs():
             return self.dataset["test"]
          
    def doc_to_text(self, doc): 
        return "satz1: "+ doc['sentence1'] + "satz2: "+ doc['sentence2'] + "\n\n"+ "etikett: "

    def doc_to_target(self, doc):
        target = doc["label"]

        return " " + str(target)

    def construct_requests(self, doc, ctx):
        """Uses RequestFactory to construct Requests and returns an iterable of
        Requests which will be sent to the LM.

        :param doc:
            The document as returned from training_docs, validation_docs, or
            test_docs.
        :param ctx: str
            The context string, generated by fewshot_context. This includes the natural
            language description, as well as the few shot examples, and the question
            part of the document for `doc`.
        """
        
        ll_0 = rf.loglikelihood(ctx, " "+"0")
        ll_1 = rf.loglikelihood(ctx, " "+"1")
   
        
        return ll_0, ll_1

    def process_results(self, doc, results):
        """Take a single document and the LM results and evaluates, returning a
        dict where keys are the names of submetrics and values are the values of
        the metric for that one document

        :param doc:
            The document as returned from training_docs, validation_docs, or test_docs.
        :param results:
            The results of the requests created in construct_requests.
        """
        ll_0, ll_1 = results
        
        pred = float('-inf')
        
        for i in results:
            if i[1] > pred:
                pred = results.index(i)
                      
        true_label = doc["label"]
        
        return {"acc": pred==true_label, "precision":(true_label, pred), "recall":(true_label, pred), "f1":(true_label, pred)}

    def aggregation(self):
        """
        :returns: {str: [metric_score] -> float}
            A dictionary where keys are the names of submetrics and values are
            functions that aggregate a list of metric scores
        """
        return {"acc":mean, "precision": partial(_pawsx_agg_precision, "precision"), 
                "recall" : partial(_paws_agg_recall, "recall"), 
                "f1" : partial(_pawsx_agg_f1, "f1")}

    def higher_is_better(self):
        return {"acc":True, "precision":True, "recall":True, "f1":True}