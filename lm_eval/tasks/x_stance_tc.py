"""
X-Stance: A Multilingual Multi-Target Dataset for Stance Detection
http://ceur-ws.org/Vol-2624/paper9.pdf

The x-stance dataset consists of more than 150 political questions and 67,000 comments by candidates.
It can be used to train and evaluate stance detection systems.
Comments are in German, French and Italian (for this task only the German subset has been selected). Questions are given in all three languages and English.
The data have been extracted from the Swiss voting advice platform Smartvote.

Git: https://github.com/ZurichNLP/xstance
Paper: https://ceur-ws.org/Vol-2624/paper9.pdf
"""
import datasets
from lm_eval.base import Task, rf
from lm_eval.metrics import mean
from functools import partial
import numpy as np


_CITATION = """
@inproceedings{vamvas2020xstance,
    author    = "Vamvas, Jannis and Sennrich, Rico",
    title     = "{X-Stance}: A Multilingual Multi-Target Dataset for Stance Detection",
    booktitle = "Proceedings of the 5th Swiss Text Analytics Conference (SwissText)  16th Conference on Natural Language Processing (KONVENS)",
    address   = "Zurich, Switzerland",
    year      = "2020",
    month     = "jun",
    url       = "http://ceur-ws.org/Vol-2624/paper9.pdf"
}"""


# Helper functions for aggregation
def _xstance_agg_precision(key, items):
    references, predictions = zip(*items)
    precision_metric = datasets.load_metric("precision")
    return precision_metric.compute(
        references=references,
        predictions=predictions,
        average="macro",
        labels=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    )[key]


def _xstance_agg_recall(key, items):
    references, predictions = zip(*items)
    recall_metric = datasets.load_metric("recall")
    return recall_metric.compute(
        references=references,
        predictions=predictions,
        average="macro",
        labels=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    )[key]


def _xstance_agg_f1(key, items):
    references, predictions = zip(*items)
    f1_metric = datasets.load_metric("f1")
    return f1_metric.compute(
        references=references,
        predictions=predictions,
        average="macro",
        labels=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    )[key]


class XSTANCE(Task):
    VERSION = 0
    DATASET_PATH = "x_stance"
    DATASET_NAME = None

    topic_dict = {
        "Digitisation": "Digitalisierung",
        "Economy": "Wirtschaft",
        "Education": "Bildung",
        "Finances": "Finanzen",
        "Foreign Policy": "Außenpolitik",
        "Immigration": "Einwanderung",
        "Infrastructure & Environment": "Infrastruktur & Umwelt",
        "Security": "Sicherheit",
        "Society": "Gesellschaft",
        "Welfare": "Soziales",
        "Healthcare": "Gesundheitswesen",
        "Political System": "Politisches System",
    }

    def has_training_docs(self):
        return True

    def has_validation_docs(self):
        return True

    def has_test_docs(self):
        return True

    def training_docs(self):
        if self.has_training_docs():
            return self.dataset["train"]

    def validation_docs(self):
        if self.has_validation_docs():
            return self.dataset["validation"]

    def test_docs(self):
        if self.has_test_docs():
            return self.dataset["test"]

    def doc_to_text(self, doc):
        return (
            "Artikel (Digitalisierung, Wirtschaft, Bildung, Finanzen, Außenpolitik, Einwanderung, Infrastruktur & Umwelt, Sicherheit, Gesellschaft, Soziales, Gesundheitswesen, Politisches System): "
            + doc["question"]  # + doc['comment']
            + "\n\n"
            + "Thema (Digitalisierung, Wirtschaft, Bildung, Finanzen, Außenpolitik, Einwanderung, Infrastruktur & Umwelt, Sicherheit, Gesellschaft, Soziales, Gesundheitswesen, Politisches System): "
        )

    def doc_to_target(self, doc):
        # The prepended `" "` is required to space out the `doc_to_text` and
        # `doc_to_target` strings.
        label = doc["topic"]
        target = ""
        if label in self.topic_dict.keys():
            target = self.topic_dict(label)
        else:
            target = ""

        return " " + target

    def construct_requests(self, doc, ctx):
        """Uses RequestFactory to construct Requests and returns an iterable of
        Requests which will be sent to the LM.

        :param doc:
            The document as returned from training_docs, validation_docs, or
            test_docs.
        :param ctx: str
            The context string, generated by fewshot_context. This includes the natural
            language description, as well as the few shot examples, and the question
            part of the document for `doc`.
        """

        request_list = []
        for key, value in self.topic_dict.items():
            request_list.append(rf.loglikelihood(ctx, " " + value))

        return tuple(request_list)

    def process_results(self, doc, results):
        """Take a single document and the LM results and evaluates, returning a
        dict where keys are the names of submetrics and values are the values of
        the metric for that one document

        :param doc:
            The document as returned from training_docs, validation_docs, or test_docs.
        :param results:
            The results of the requests created in construct_requests.
        """
        pred = float("-inf")

        scores = [i[0] for i in results]
        pred = scores.index(max(scores))
        topic = doc["topic"]
        true_label = list(self.topic_dict).index(topic)

        return {
            "acc": pred == true_label,
            "precision": (true_label, pred),
            "recall": (true_label, pred),
            "f1": (true_label, pred),
        }

    def aggregation(self):
        """
        :returns: {str: [metric_score] -> float}
            A dictionary where keys are the names of submetrics and values are
            functions that aggregate a list of metric scores
        """
        return {
            "acc": mean,
            "precision": partial(_xstance_agg_precision, "precision"),
            "recall": partial(_xstance_agg_recall, "recall"),
            "f1": partial(_xstance_agg_f1, "f1"),
        }

    def higher_is_better(self):
        return {"acc": True, "precision": True, "recall": True, "f1": True}
